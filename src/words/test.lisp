(in-package :words)

(5am:def-suite words)

(5am:in-suite words)

(5am:test do-words-starting
  (let ((names (vector "albert" "alvin" "bert" "calvin")))
    (5am:is (equal '("albert" "alvin") (words-starting "a" names)))
    (5am:is (equal '("albert" "alvin") (words-starting "al" names)))
    (5am:is (equal '("albert") (words-starting "alb" names)))
    (5am:is (equal '() (words-starting "albx" names)))
    (5am:is (equal '("calvin") (words-starting "c" names)))
    (5am:is (equal '("bert") (words-starting "bert" names)))
    ))

(5am:test do-words-ending
  (let ((names (vector "alvin" "calvin" "bert" "albert")))
    (5am:is (equal '("alvin" "calvin") (words-ending "in" names)))
    (5am:is (equal '("bert" "albert") (words-ending "t" names)))
    (5am:is (equal '("bert" "albert") (words-ending "bert" names)))
    (5am:is (equal '("bert" "albert") (words-ending "bert" names)))
    ))

(5am:test bs-position-if-forward
  (let ((names (vector "albert" "alvin" "bert" "calvin")))
    (5am:is (equal 0 (bs-position-if "albert" names :test #'string= :compare #'string<)))
    (5am:is (equal 1 (bs-position-if "alvin" names :test #'string= :compare #'string<)))
    (5am:is (equal 2 (bs-position-if "bert" names :test #'string= :compare #'string<)))
    (5am:is (equal 3 (bs-position-if "calvin" names :test #'string= :compare #'string<)))
    (5am:is (null (bs-position-if "aaa" names :test #'string= :compare #'string<)))
    (5am:is (null (bs-position-if "bbb" names :test #'string= :compare #'string<)))
    (5am:is (null (bs-position-if "ccc" names :test #'string= :compare #'string<)))
    (5am:is (equal 0 (bs-position-if "albert" names :test #'word-starts-with :compare #'string<)))
    (5am:is (equal 0 (bs-position-if "al" names :test #'word-starts-with :compare #'string<)))
    (5am:is (equal 1 (bs-position-if "al" names :test #'word-starts-with :compare #'string< :from-end t)))
    (5am:is (equal 3 (bs-position-if "cal" names :test #'word-starts-with :compare #'string<)))))

(5am:test bs-position-if-reverse
  (let ((names (vector "alvin" "calvin" "bert" "albert")))
    (5am:is (equal 0 (bs-position-if "alvin" names :test #'string= :compare #'reverse-string<)))
    (5am:is (equal 1 (bs-position-if "calvin" names :test #'string= :compare #'reverse-string<)))
    (5am:is (equal 2 (bs-position-if "bert" names :test #'string= :compare #'reverse-string<)))
    (5am:is (equal 3 (bs-position-if "albert" names :test #'string= :compare #'reverse-string<)))
    (5am:is (null (bs-position-if "aaa" names :test #'string= :compare #'reverse-string<)))
    (5am:is (null (bs-position-if "qqq" names :test #'string= :compare #'reverse-string<)))
    (5am:is (null (bs-position-if "zzz" names :test #'string= :compare #'reverse-string<)))
    (5am:is (equal 0 (bs-position-if "alvin" names :test #'word-ends-with :compare #'reverse-string<)))
    (5am:is (equal 0 (bs-position-if "vin" names :test #'word-ends-with :compare #'reverse-string<)))
    (5am:is (equal 1 (bs-position-if "vin" names :test #'word-ends-with :compare #'reverse-string< :from-end t)))
    (5am:is (equal 2 (bs-position-if "ert" names :test #'word-ends-with :compare #'reverse-string<)))
    (5am:is (equal 3 (bs-position-if "ert" names :test #'word-ends-with :compare #'reverse-string< :from-end t)))
    (5am:is (equal 3 (bs-position-if "lbert" names :test #'word-ends-with :compare #'reverse-string<)))))

(5am:test word-starts-with
  (5am:is-true (word-starts-with "" ""))
  (5am:is-true (word-starts-with "a" "a"))
  (5am:is-true (word-starts-with "ab" "abc"))
  (5am:is-true (word-starts-with "abc" "abc"))
  (5am:is-true (word-starts-with "abc" "abcde"))
  (5am:is-true (word-starts-with "abc" "abcd"))
  (5am:is-false (word-starts-with "abc" ""))
  (5am:is-false (word-starts-with "abc" "b"))
  (5am:is-false (word-starts-with "abc" "c"))
  (5am:is-false (word-starts-with "abc" "bc")))

(5am:test word-ends-with
  (5am:is-true (word-ends-with "" ""))
  (5am:is-true (word-ends-with "a" "a"))
  (5am:is-true (word-ends-with "b" "ab"))
  (5am:is-true (word-ends-with "c" "abc"))
  (5am:is-true (word-ends-with "bc" "abc"))
  (5am:is-true (word-ends-with "abc" "abc"))
  (5am:is-true (word-ends-with "bcd" "abcd"))
  (5am:is-true (word-ends-with "" "abc"))
  (5am:is-false (word-ends-with "a" "abc"))
  (5am:is-false (word-ends-with "b" "abc"))
  (5am:is-false (word-ends-with "ab" "abc")))

(5am:test has-word-starting
  (let ((names (vector "albert" "alvin" "bert" "calvin")))
    (5am:is-true (has-word-starting "albert" names))
    (5am:is-true (has-word-starting "alvin" names))
    (5am:is-true (has-word-starting "bert" names))
    (5am:is-true (has-word-starting "calvin" names))
    (5am:is-true (has-word-starting "al" names))
    (5am:is-true (has-word-starting "alb" names))
    (5am:is-true (has-word-starting "alv" names))
    (5am:is-true (has-word-starting "ber" names))
    (5am:is-true (has-word-starting "b" names))
    (5am:is-true (has-word-starting "c" names))
    (5am:is-true (has-word-starting "cal" names))
    (5am:is-false (has-word-starting "aa" names))
    (5am:is-false (has-word-starting "bb" names))
    (5am:is-false (has-word-starting "cc" names))
    (5am:is-false (has-word-starting "dd" names))
    (5am:is-false (has-word-starting "alz" names))))

(5am:test has-word-ending
  (let ((names (vector "alvin" "calvin" "bert" "albert")))
    (5am:is-true (has-word-ending "alvin" names))
    (5am:is-true (has-word-ending "calvin" names))
    (5am:is-true (has-word-ending "bert" names))
    (5am:is-true (has-word-ending "albert" names))
    (5am:is-true (has-word-ending "in" names))
    (5am:is-true (has-word-ending "vin" names))
    (5am:is-true (has-word-ending "lvin" names))
    (5am:is-true (has-word-ending "t" names))
    (5am:is-true (has-word-ending "rt" names))
    (5am:is-true (has-word-ending "ert" names))
    (5am:is-true (has-word-ending "lbert" names))
    (5am:is-false (has-word-ending "aa" names))
    (5am:is-false (has-word-ending "qq" names))
    (5am:is-false (has-word-ending "tt" names))
    (5am:is-false (has-word-ending "zz" names))
    (5am:is-false (has-word-ending "xrt" names))))
  
